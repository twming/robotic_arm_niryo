# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Niryo All rights reserved. No part of this document
# may be reproduced or transmitted in any form or by any means without prior
# written consent of Niryo SAS
# This file is distributed under the same license as the Ned ROS
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Ned ROS Documentation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-14 15:51+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/tcp_server.rst:2
msgid "Use Ned's TCP server"
msgstr ""

#: ../../source/tcp_server.rst:4
msgid ""
"Ned is permanently running a TCP Server to acquire requests. This server "
"is built on top of the :doc:`Ned Python ROS Wrapper <ros_wrapper>`."
msgstr ""

#: ../../source/tcp_server.rst:7
msgid ""
"It offers a simple way for developers to create programs for robot and to"
" control them via remote communication on a computer, on a mobile or any "
"device with network facilities."
msgstr ""

#: ../../source/tcp_server.rst:11
msgid ""
"Programs can communicate through network TCP with the robots in any "
"language available."
msgstr ""

#: ../../source/tcp_server.rst:16
msgid "Connection"
msgstr ""

#: ../../source/tcp_server.rst:17
msgid ""
"To access the server, you will have to use to robot's IP adress and "
"communicate via the **port 40001**."
msgstr ""

#: ../../source/tcp_server.rst:21
msgid "Communication"
msgstr ""

#: ../../source/tcp_server.rst:22
msgid ""
"Only one client can communicate with the server (reconnection effective "
"but no multi clients)."
msgstr ""

#: ../../source/tcp_server.rst:24
msgid ""
"The server answers only after the command is done, so it can't deal with "
"multiple commands at the same time."
msgstr ""

#: ../../source/tcp_server.rst:27
msgid "Packet convention"
msgstr ""

#: ../../source/tcp_server.rst:30
msgid "General format"
msgstr ""

#: ../../source/tcp_server.rst:32
msgid ""
"For easier usage and easier debugging, the communication is based on JSON"
" format."
msgstr ""

#: ../../source/tcp_server.rst:34
msgid ""
"Every package have this following shape: "
"``<json_packet_size>{<json_content>}<payload>``."
msgstr ""

#: ../../source/tcp_server.rst:36
msgid "The JSON packet size is an unsigned short coded on 2 bytes."
msgstr ""

#: ../../source/tcp_server.rst:38
msgid "The JSON contains command's name & params."
msgstr ""

#: ../../source/tcp_server.rst:40
msgid "Payload contains *heavy* data like an image."
msgstr ""

#: ../../source/tcp_server.rst:43
msgid "Request"
msgstr ""

#: ../../source/tcp_server.rst:46
msgid "Format - Request"
msgstr ""

#: ../../source/tcp_server.rst:48
msgid "As no function requests a payload in input, requests have the following."
msgstr ""

#: ../../source/tcp_server.rst:50
msgid ""
"Format: ``<json_packet_size>{'param_list': [<param_1>, <param_2>, ....], "
"'command': <command_str>}``"
msgstr ""

#: ../../source/tcp_server.rst:53
msgid "Examples - Request"
msgstr ""

#: ../../source/tcp_server.rst:55
msgid "Calibrate auto: ``{'param_list': ['AUTO'], 'command': 'CALIBRATE'}``"
msgstr ""

#: ../../source/tcp_server.rst:57
msgid ""
"Move joints: ``{'param_list': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'command': "
"'MOVE_JOINTS'}``"
msgstr ""

#: ../../source/tcp_server.rst:60
msgid "Answer"
msgstr ""

#: ../../source/tcp_server.rst:63
msgid "Format - Answer"
msgstr ""

#: ../../source/tcp_server.rst:65
msgid ""
"Firstly, answers indicate to the user if its command has been well "
"executed. This is indicated in the JSON by the parameter \"status\"."
msgstr ""

#: ../../source/tcp_server.rst:68
msgid "A successful answer will have the format:"
msgstr ""

#: ../../source/tcp_server.rst:70
msgid ""
"``{'status': 'OK', 'list_ret_param': [<param_1>, <param_2>, ....], "
"'payload_size': <payload_size_int>, 'command': "
"<command_str>}<payload_str>``"
msgstr ""

#: ../../source/tcp_server.rst:72
msgid ""
"An unsuccessful answer will have the format: ``{'status': 'KO', "
"'message': <message_str>}``"
msgstr ""

#: ../../source/tcp_server.rst:76
msgid "Examples - Answer"
msgstr ""

#: ../../source/tcp_server.rst:77
msgid ""
"Calibrate Auto: ``{'status': 'OK', 'list_ret_param': [], 'payload_size': "
"0, 'command': 'CALIBRATE'}``"
msgstr ""

#: ../../source/tcp_server.rst:80
msgid ""
"Get Pose: ``{'status': 'OK', 'list_ret_param': [0.2, 0.15, 0.35, 0.5, "
"-0.6, 0.1], 'payload_size': 0, 'command': 'GET_POSE'}``"
msgstr ""

#: ../../source/tcp_server.rst:86
msgid "Commands enum for TCP server"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper_enums.CommandEnum:1 of
msgid "Enumeration of all commands used"
msgstr ""

#~ msgid "Use Ned TCP Server"
#~ msgstr ""

#~ msgid ""
#~ "Ned is permanently running a TCP "
#~ "Server to acquire requests. This server"
#~ " is built on top of the "
#~ ":doc:`Ned Python ROS Wrapper <ros_wrapper>`"
#~ msgstr ""

#~ msgid ""
#~ "To access the server, you will "
#~ "have to use to Robot's IP Adress"
#~ " and communicate via the **port "
#~ "40001**"
#~ msgstr ""

#~ msgid "Packet Convention"
#~ msgstr ""

#~ msgid ""
#~ "Every package have this following shape"
#~ " : ``<json_packet_size>{<json_content>}<payload>``"
#~ msgstr ""

#~ msgid "The JSON packet size is an unsigned short coded on 2 bytes"
#~ msgstr ""

#~ msgid "The JSON contains command's name & params"
#~ msgstr ""

#~ msgid "Payload contains *heavy* data like an image"
#~ msgstr ""

#~ msgid "As no function request a payload in input, requests have the following"
#~ msgstr ""

#~ msgid ""
#~ "format : ``<json_packet_size>{'param_list': "
#~ "[<param_1>, <param_2>, ....], 'command': "
#~ "<command_str>}``"
#~ msgstr ""

#~ msgid "Calibrate auto : ``{'param_list': ['AUTO'], 'command': 'CALIBRATE'}``"
#~ msgstr ""

#~ msgid ""
#~ "Move joints : ``{'param_list': [0.0, "
#~ "0.0, 0.0, 0.0, 0.0, 0.0], 'command': "
#~ "'MOVE_JOINTS'}``"
#~ msgstr ""

#~ msgid ""
#~ "Firstly, answers indicate to the user"
#~ " if its command has been well "
#~ "executed. This is indicated in the "
#~ "JSON by the parameter \"status\""
#~ msgstr ""

#~ msgid "A successful answer will have the format :"
#~ msgstr ""

#~ msgid ""
#~ "An unsuccessful answer will have the "
#~ "format : ``{'status': 'KO', 'message': "
#~ "<message_str>}``"
#~ msgstr ""

#~ msgid ""
#~ "Calibrate Auto : ``{'status': 'OK', "
#~ "'list_ret_param': [], 'payload_size': 0, "
#~ "'command': 'CALIBRATE'}``"
#~ msgstr ""

#~ msgid "Commands enum for TCP Server"
#~ msgstr ""

#~ msgid ""
#~ "Every package have this following shape"
#~ " : ``<json_packet_size>{<json_content>}<payload>``."
#~ msgstr ""

#~ msgid ""
#~ "format: ``<json_packet_size>{'param_list': [<param_1>, "
#~ "<param_2>, ....], 'command': <command_str>}``"
#~ msgstr ""

#~ msgid "Enumeration of all commands used"
#~ msgstr ""

#~ msgid "Use Ned TCP server"
#~ msgstr ""

#~ msgid "As no function request a payload in input, requests have the following."
#~ msgstr ""

#~ msgid ""
#~ "It offers a simple way for "
#~ "developers to create programs for robot"
#~ " to control them via remote "
#~ "communication on a computer, on a "
#~ "mobile or any device with network "
#~ "facilities."
#~ msgstr ""

