# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Niryo All rights reserved. No part of this document
# may be reproduced or transmitted in any form or by any means without prior
# written consent of Niryo SAS
# This file is distributed under the same license as the Ned ROS
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Ned ROS Documentation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-11 13:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/stack/high_level/niryo_robot_rpi.rst:2
msgid "Niryo_robot_rpi"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:4
msgid ""
"This package deals with Raspberry Pi related stuff (Button, fans, I/O, "
"leds, ...)."
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:8
msgid "Raspberry Pi Node"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:9
msgid "The ROS Node manages the following components:"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:11
msgid "Physical top button: executes actions when the button is pressed."
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:12
msgid ""
"Digital I/O panel: gets commands and sends the current state of digital "
"I/Os. Also controls tools like the Electromagnet."
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:13
msgid ""
"Analog I/O panel: gets commands and sends the current state of analog "
"I/Os."
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:14
msgid ""
"End Effector I/O panel: gets commands and sends the current state of the "
"digital I/Os of the end effector panel on Ned2. Also controls tools like "
"the Electromagnet."
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:15
msgid "Robot fans."
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:16
msgid "Led: sets the LED color."
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:17
msgid "Shutdown Manager: shutdown or reboot the Raspberry."
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:18
msgid ""
"ROS log: can remove all previous logs on start_up to prevent a lack of "
"disk space in the long run (SD cards do not have infinite storage)."
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:20
msgid "It belongs to the ROS namespace: |namespace_emphasize|."
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:22
msgid ""
"**Note that this package should not be used when you are using Ned ROS "
"stack on your computer in simulation mode. Executes actions when the "
"button is pressed.**"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:25
msgid "Publisher - Raspberry Pi"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:27
msgid "RPI Package's Publishers"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:33
#: ../../source/stack/high_level/niryo_robot_rpi.rst:67
msgid "Name"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:34
#: ../../source/stack/high_level/niryo_robot_rpi.rst:68
msgid "Message Type"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:35
#: ../../source/stack/high_level/niryo_robot_rpi.rst:69
msgid "Description"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:36
msgid "``pause_state``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:37
msgid ":ref:`PausePlanExecution<source/stack/high_level/niryo_robot_arm_commander:PausePlanExecution>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:38
msgid "Publishes the current execution state launched when button is pressed"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:39
msgid "``/niryo_robot/blockly/save_current_point``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:40
msgid ":std_msgs:`std_msgs/Int32<Int32>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:41
msgid ""
"Publishes current point when user is in Blockly page to save block by "
"pressing button"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:42
msgid "``/niryo_robot/rpi/is_button_pressed``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:43
msgid ":std_msgs:`std_msgs/Bool<Bool>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:44
msgid "Publishes the button state (true if pressed)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:45
msgid "``digital_io_state``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:46
msgid ""
":ref:`DigitalIOState<source/stack/high_level/niryo_robot_rpi:DigitalIOState"
" (Topic)>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:47
msgid ""
"Publishes the digital I/Os state by giving for each it's pin / name / "
"mode / state"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:48
msgid "``analog_io_state``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:49
msgid ""
":ref:`AnalogIOState<source/stack/high_level/niryo_robot_rpi:AnalogIOState"
" (Topic)>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:50
msgid ""
"Publishes the analog I/Os state by giving for each it's pin / name / mode"
" / state"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:51
msgid "``/niryo_robot/rpi/led_state``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:52
msgid ":std_msgs:`std_msgs/Int8<Int8>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:53
msgid "Publishes the current LED color"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:54
msgid "``ros_log_status``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:55
msgid ""
":ref:`LogStatus<source/stack/high_level/niryo_robot_rpi:LogStatus "
"(Topic)>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:56
msgid ""
"Publishes the current log status (log size / available disk / boolean if "
"should delete ros log on startup)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:59
msgid "Services - Raspberry Pi"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:61
msgid "RPI Services"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:70
msgid "``shutdown_rpi``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:71
#: ../../source/stack/high_level/niryo_robot_rpi.rst:74
#: ../../source/stack/high_level/niryo_robot_rpi.rst:98
#: ../../source/stack/high_level/niryo_robot_rpi.rst:101
msgid ":ref:`SetInt<source/stack/high_level/niryo_robot_msgs:SetInt>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:72
msgid "Shutdowns the Raspberry Pi"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:73
msgid "``/niryo_robot/rpi/change_button_mode``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:75
msgid "Changes top button mode (autorun program, blockly, nothing, ...)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:76
msgid "``get_analog_io``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:77
msgid ""
":ref:`GetAnalogIO<source/stack/high_level/niryo_robot_rpi:GetAnalogIO "
"(Service)>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:78
msgid "Gets analog IO state list"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:79
msgid "``get_digital_io``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:80
msgid ""
":ref:`GetDigitalIO<source/stack/high_level/niryo_robot_rpi:GetDigitalIO "
"(Service)>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:81
msgid "Gets digital IO state list"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:82
msgid "``set_analog_io``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:83
msgid ""
":ref:`SetAnalogIO<source/stack/high_level/niryo_robot_rpi:SetAnalogIO "
"(Service)>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:84
msgid "Sets an analog IO to the given value"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:85
msgid "``set_digital_io``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:86
msgid ""
":ref:`SetDigitalIO<source/stack/high_level/niryo_robot_rpi:SetDigitalIO "
"(Service)>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:87
msgid "Sets a digital IO to the given value"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:88
msgid "``set_digital_io_mode``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:89
msgid ""
":ref:`SetDigitalIO<source/stack/high_level/niryo_robot_rpi:SetIOMode "
"(Service)>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:90
msgid "Sets a digital IO to the given mode"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:91
msgid "``set_led_state``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:92
msgid ":ref:`std_msgs/SetInt<source/stack/high_level/niryo_robot_msgs:SetInt>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:93
msgid "Sets LED state"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:94
msgid "``set_led_custom_blinker``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:95
msgid ""
":ref:`LedBlinker<source/stack/high_level/niryo_robot_rpi:LedBlinker "
"(Service)>`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:96
msgid "Sets the LED in blink mode with the color given"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:97
msgid "``purge_ros_logs``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:99
msgid "Purges ROS log"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:100
msgid "``set_purge_ros_log_on_startup``"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:102
msgid ""
"Modifies the permanent settings that tell if the robot should purge its "
"ROS log at each boot"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:105
msgid "Dependencies - Raspberry Pi"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:107
msgid ":msgs_index:`std_msgs`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:108
msgid ":msgs_index:`actionlib_msgs`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:109
msgid ":msgs_index:`sensor_msgs`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:110
msgid ":doc:`niryo_robot_msgs`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:111
msgid ":doc:`niryo_robot_arm_commander`"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:114
msgid "`Adafruit-GPIO==1.0.3 <https://github.com/adafruit/Adafruit_Python_GPIO>`_"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:115
msgid ""
"`Adafruit-PureIO==1.0.1 "
"<https://github.com/adafruit/Adafruit_Python_PureIO/tree/1.0.1>`_"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:116
msgid ""
"`Adafruit-BBIO==1.0.9 <https://github.com/adafruit/adafruit-beaglebone-"
"io-python/tree/1.0.9>`_"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:117
msgid ""
"`Adafruit-ADS1x15==1.0.2 "
"<https://github.com/adafruit/Adafruit_Python_ADS1x15>`_"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:118
msgid "`board==1.0 <https://github.com/tjguk/dojo-board>`_"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:119
msgid "`smbus==1.1.post2 <https://i2c.wiki.kernel.org/index.php/I2C_Tools>`_"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:120
msgid "`smbus2==0.4.1 <https://github.com/kplindegaard/smbus2/tree/0.4.1>`_"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:121
msgid "`spidev==3.5 <https://github.com/doceme/py-spidev>`_"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:125
msgid "Services files - Raspberry Pi"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:128
msgid "ChangeMotorConfig (Service)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:134
msgid "GetAnalogIO (Service)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:140
msgid "GetDigitalIO (Service)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:146
msgid "LedBlinker (Service)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:152
msgid "SetDigitalIO (Service)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:158
msgid "SetAnalogIO (Service)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:164
msgid "SetIOMode (Service)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:170
msgid "SetPullup (Service)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:176
msgid "Messages files - Raspberry Pi"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:180
msgid "AnalogIO"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:186
msgid "AnalogIOState (Topic)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:192
msgid "DigitalIO"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:198
msgid "DigitalIOState (Topic)"
msgstr ""

#: ../../source/stack/high_level/niryo_robot_rpi.rst:205
msgid "LogStatus (Topic)"
msgstr ""

#~ msgid "Niryo Robot RPI Package"
#~ msgstr ""

#~ msgid ""
#~ "This package deals with raspberry pi "
#~ "related stuff (Button, fans, I/O, leds,"
#~ " ...)"
#~ msgstr ""

#~ msgid "RPI Node"
#~ msgstr ""

#~ msgid ""
#~ "The ROS Node manages the following "
#~ "components: - Physical top button: "
#~ "executes actions when the button is "
#~ "pressed. - Digital I/O panel : "
#~ "gets commands and sends the current "
#~ "state of digital I/Os. Also controls "
#~ "tools like the electromagnet. - Robot"
#~ " fans - Led : sets the LED "
#~ "color. - ROS log : can remove "
#~ "all previous logs on startup to "
#~ "prevent a lack of disk space in"
#~ " the long run (SD cards do not"
#~ " have infinite storage)."
#~ msgstr ""

#~ msgid "The namespace used is : |namespace_emphasize|"
#~ msgstr ""

#~ msgid "Publisher - RPI"
#~ msgstr ""

#~ msgid "Services - RPI"
#~ msgstr ""

#~ msgid "Dependencies - RPI"
#~ msgstr ""

#~ msgid "Services & Messages files - RPI"
#~ msgstr ""

#~ msgid ""
#~ "**Note that this package should not "
#~ "be used when you are using Ned "
#~ "ROS stack on your computer, in "
#~ "simulation mode.**executes actions when the"
#~ " button is pressed.**"
#~ msgstr ""

#~ msgid ""
#~ "Publish current point when user is "
#~ "in blockly page to save block by"
#~ " pressing button"
#~ msgstr ""

#~ msgid "Shutdown the raspberry pi"
#~ msgstr ""

#~ msgid "Purge ros log"
#~ msgstr ""

#~ msgid ""
#~ "Modify the permanent settings that tells"
#~ " if robot should purge it's ros "
#~ "log at each boot"
#~ msgstr ""

#~ msgid ":ref:`PausePlanExecution<PausePlanExecution (Message)>`"
#~ msgstr ""

#~ msgid ":ref:`DigitalIOState<DigitalIOState (Service)>`"
#~ msgstr ""

#~ msgid ":ref:`LogStatus<LogStatus (Service)>`"
#~ msgstr ""

#~ msgid ":ref:`SetInt<SetInt>`"
#~ msgstr ""

#~ msgid ":ref:`GetDigitalIO<GetDigitalIO (Service)>`"
#~ msgstr ""

#~ msgid ":ref:`SetDigitalIO<SetDigitalIO (Service)>`"
#~ msgstr ""

#~ msgid ":ref:`std_msgs/SetInt<SetInt>`"
#~ msgstr ""

#~ msgid ":ref:`LedBlinker<LedBlinker (Service)>`"
#~ msgstr ""

#~ msgid ":ref:`niryo_robot_msgs <Niryo Robot Messages Package>`"
#~ msgstr ""

#~ msgid ":ref:`niryo_robot_commander <Niryo Robot Commander Package>`"
#~ msgstr ""

#~ msgid "Niryo robot RPI package"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`niryo_robot_msgs <source/ros/niryo_robot_msgs:Niryo "
#~ "Robot Messages Package>`"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`niryo_robot_commander "
#~ "<source/ros/niryo_robot_commander:Niryo Robot Commander"
#~ " Package>`"
#~ msgstr ""

#~ msgid ""
#~ "The ROS Node manages the following "
#~ "components: - Physical top button: "
#~ "executes actions when the button is "
#~ "pressed. - Digital I/O panel: gets "
#~ "commands and sends the current state "
#~ "of digital I/Os. Also controls tools "
#~ "like the Electromagnet. - Robot fans."
#~ " - Led: sets the LED color. -"
#~ " ROS log: can remove all previous "
#~ "logs on startup to prevent a lack"
#~ " of disk space in the long run"
#~ " (SD cards do not have infinite "
#~ "storage)."
#~ msgstr ""

#~ msgid ""
#~ ":ref:`PausePlanExecution<source/ros/niryo_robot_commander:PausePlanExecution"
#~ " (Message)>`"
#~ msgstr ""

#~ msgid ":doc:`niryo_robot_commander`"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`PausePlanExecution<source/ros/niryo_robot_arm_commander:PausePlanExecution"
#~ " (Message)>`"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`DigitalIOState<source/ros/niryo_robot_rpi:DigitalIOState "
#~ "(Service)>`"
#~ msgstr ""

#~ msgid ":ref:`LogStatus<source/ros/niryo_robot_rpi:LogStatus (Service)>`"
#~ msgstr ""

#~ msgid ":ref:`SetInt<source/ros/niryo_robot_msgs:SetInt>`"
#~ msgstr ""

#~ msgid ":ref:`GetDigitalIO<source/ros/niryo_robot_rpi:GetDigitalIO (Service)>`"
#~ msgstr ""

#~ msgid ":ref:`SetDigitalIO<source/ros/niryo_robot_rpi:SetDigitalIO (Service)>`"
#~ msgstr ""

#~ msgid ":ref:`std_msgs/SetInt<source/ros/niryo_robot_msgs:SetInt>`"
#~ msgstr ""

#~ msgid ":ref:`LedBlinker<source/ros/niryo_robot_rpi:LedBlinker (Service)>`"
#~ msgstr ""

#~ msgid ""
#~ "Publish the I/Os state by giving "
#~ "for each it's pin / name / "
#~ "mode / state"
#~ msgstr ""

#~ msgid "Set a digital IO to the mode given"
#~ msgstr ""

#~ msgid "``set_digital_io_state``"
#~ msgstr ""

#~ msgid "Set a digital IO to the state given"
#~ msgstr ""

#~ msgid "Services & Messages files - Raspberry Pi"
#~ msgstr ""

#~ msgid "DigitalIOState (Service)"
#~ msgstr ""

#~ msgid "LogStatus (Service)"
#~ msgstr ""

#~ msgid ""
#~ "End Effector I/O panel: gets commands"
#~ " and sends the current state of "
#~ "the digital I/Os of the end "
#~ "effector panel on Ned2."
#~ msgstr ""

#~ msgid ""
#~ ":ref:`DigitalIOState<source/stack/high_level/niryo_robot_rpi:DigitalIOState"
#~ " (Service)>`"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`AnalogIOState<source/stack/high_level/niryo_robot_rpi:AnalogIOState"
#~ " (Service)>`"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`LogStatus<source/stack/high_level/niryo_robot_rpi:LogStatus "
#~ "(Service)>`"
#~ msgstr ""

#~ msgid "The namespace used is: |namespace_emphasize|"
#~ msgstr ""

#~ msgid ""
#~ ":ref:`PausePlanExecution<source/stack/high_level/niryo_robot_arm_commander:PausePlanExecution"
#~ " (Message)>`"
#~ msgstr ""

#~ msgid ""
#~ "End Effector I/O panel: gets commands"
#~ " and sends the current state of "
#~ "the digital I/Os of the end "
#~ "effector panel on Ned2. Also controls"
#~ " tools like the Electromagnet.\"."
#~ msgstr ""

#~ msgid ""
#~ "ROS log: can remove all previous "
#~ "logs on startup to prevent a lack"
#~ " of disk space in the long run"
#~ " (SD cards do not have infinite "
#~ "storage)."
#~ msgstr ""

#~ msgid "Publish the current execution state launched when button is pressed"
#~ msgstr ""

#~ msgid ""
#~ "Publish current point when user is "
#~ "in Blockly page to save block by"
#~ " pressing button"
#~ msgstr ""

#~ msgid "Publish the button state (true if pressed)"
#~ msgstr ""

#~ msgid ""
#~ "Publish the digital I/Os state by "
#~ "giving for each it's pin / name"
#~ " / mode / state"
#~ msgstr ""

#~ msgid ""
#~ "Publish the analog I/Os state by "
#~ "giving for each it's pin / name"
#~ " / mode / state"
#~ msgstr ""

#~ msgid "Publish the current LED color"
#~ msgstr ""

#~ msgid ""
#~ "Publish the current log status (log "
#~ "size / available disk / boolean if"
#~ " should delete ros log on startup)"
#~ msgstr ""

#~ msgid "Change top button mode (autorun program, blockly, nothing, ...)"
#~ msgstr ""

#~ msgid "Get analog IO state list"
#~ msgstr ""

#~ msgid "Get digital IO state list"
#~ msgstr ""

#~ msgid "Set a analog IO to the given value"
#~ msgstr ""

#~ msgid "Set a digital IO to the given value"
#~ msgstr ""

#~ msgid "Set a digital IO to the given mode"
#~ msgstr ""

#~ msgid ""
#~ "Modifies the permanent settings that "
#~ "tell if the robot should purge "
#~ "it's ROS log at each boot"
#~ msgstr ""

