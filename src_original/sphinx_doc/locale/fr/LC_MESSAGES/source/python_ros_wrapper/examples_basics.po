# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Niryo All rights reserved. No part of this document
# may be reproduced or transmitted in any form or by any means without prior
# written consent of Niryo SAS
# This file is distributed under the same license as the Ned ROS
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#


msgid ""
msgstr ""
"Project-Id-Version: Ned ROS Documentation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-13 09:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/python_ros_wrapper/examples_basics.rst:2
msgid "Examples: Basics"
msgstr "Exemples : Les principes de base"

#: ../../source/python_ros_wrapper/examples_basics.rst:4
msgid ""
"In this file, two short programs are implemented & commented in order to "
"help you understand the philosophy behind the Python ROS Wrapper."
msgstr ""
"Dans ce fichier, deux programmes courts sont implémentés et commentés "
"afin de vous aider à comprendre la philosophie derrière Python ROS "
"Wrapper."

#: ../../source/python_ros_wrapper/examples_basics.rst:8
msgid ""
"If you are using the real robot, make sure the environment around is "
"clear."
msgstr ""
"Si vous utilisez le vrai robot, assurez-vous que l'environnement autour "
"est dégagé."

#: ../../source/python_ros_wrapper/examples_basics.rst:12
msgid "Your first move joint"
msgstr "Votre premier mouvement d'axes"

#: ../../source/python_ros_wrapper/examples_basics.rst:14
msgid "The following example shows a first use case. It's a simple MoveJ. ::"
msgstr ""
"L'exemple suivant montre un premier cas d'utilisation. C’est un simple "
"MoveJ. ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:35
msgid "Code details - First MoveJ"
msgstr "Détails du code - Premier MoveJ"

#: ../../source/python_ros_wrapper/examples_basics.rst:36
msgid ""
"First of all, we indicate to the shell that we are running a Python "
"Script: ::"
msgstr ""
"Tout d'abord il faut indiquer au système que nous exécutons un script "
"Python : ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:40


msgid "Then, we import the API package to be able to access functions: ::"
msgstr ""
"Ensuite, nous importons le package API pour pouvoir accéder aux fonctions"
" : ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:44
msgid "Then, we install a ROS Node in order to communicate with ROS master: ::"
msgstr ""
"Ensuite, il est nécessaire d'installer un nœud ROS afin de communiquer "
"avec le ROS master : ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:51
msgid ""
"We start a "
":class:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper` "
"instance: ::"
msgstr ""
"Nous lançons une instance "
":class:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper` : "
"::"

#: ../../source/python_ros_wrapper/examples_basics.rst:55
msgid ""
"Once the connection is done, we calibrate the robot using its "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_auto`"
" function: ::"
msgstr ""
"Une fois la connexion établie, nous calibrons le robot à l'aide de sa "
"fonction "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_auto`"
" : ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:60
msgid ""
"As the robot is now calibrated, we can do a Move Joints by giving the 6 "
"axis positions in radians! To do so, we use "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_joints`:"
" ::"
msgstr ""
"Maintenant que le robot est calibré, nous pouvons faire un déplacement "
"d'axes en donnant les 6 positions des axes en radians. Pour ce faire, "
"nous utilisons "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_joints`:"
" ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:67
msgid "Your first pick and place"
msgstr "Votre premier pick and place"

#: ../../source/python_ros_wrapper/examples_basics.rst:68
msgid ""
"For our second example, we are going to develop an algorithm of pick and "
"place: ::"
msgstr ""
"Pour notre deuxième exemple, nous allons développer un algorithme de pick"
" and place : ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:99
msgid "Code details - first pick and place"
msgstr "Détails du code - Premier pick and place"

#: ../../source/python_ros_wrapper/examples_basics.rst:101
msgid "First of all, we do the imports and start a ROS Node: ::"
msgstr "Tout d'abord, il faut effectuer les importations et démarrer un nœud ROS :"

#: ../../source/python_ros_wrapper/examples_basics.rst:110
msgid ""
"Then, create a "
":class:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper` "
"instance & calibrate the robot: ::"
msgstr ""
"Ensuite, il est nécessaire de créer une instance "
":class:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper` et "
"de calibrer le robot : ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:117
msgid ""
"Then, we equip the tool with "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.update_tool`"
" ::"
msgstr ""
"Ensuite, il vous faut équiper l'outil avec "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.update_tool`"
" : ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:122
msgid ""
"Now that our initialization is done, we can open the Gripper (or push air"
" from the Vacuum pump) with "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.release_with_tool`,"
" go to the picking pose via "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose`"
" & then catch an object with "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.grasp_with_tool`!"
" ::"
msgstr ""
"Maintenant que notre initialisation est terminée, nous pouvons ouvrir le "
"Gripper (ou activer la Pompe à vide) avec "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.release_with_tool`,"
" aller à la position de picking via "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose`"
" et ensuite attraper l'objet avec "
":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.grasp_with_tool`"
" ! ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:135
msgid "We now get to the place pose, and place the object. ::"
msgstr ""
"Nous voilà maintenant en position finale (place position) et le robot "
"prêt à placer l'objet. ::"

#: ../../source/python_ros_wrapper/examples_basics.rst:144
msgid "Notes - Basics examples"
msgstr "Notes - Exemples basiques"

#: ../../source/python_ros_wrapper/examples_basics.rst:147
msgid ""
"You may not have fully understood how to move the robot and use tools of "
"Ned and that is totally fine because you will find more details on "
"another examples page!"
msgstr ""
"Si vous n'avez pas bien compris comment déplacer le robot et utiliser les"
" outils de Ned, c'est tout à fait normal. Vous trouverez plus de détails "
"sur les autres pages d'exemples !"

#: ../../source/python_ros_wrapper/examples_basics.rst:149
msgid ""
"The important thing to remember from this page is how to import the "
"library & connect to the robot."
msgstr ""
"La chose importante à retenir de cette page est de savoir comment "
"importer la bibliothèque et de se connecter au robot."

#~ msgid ""
#~ "In this file, two short programs "
#~ "are implemented & commented in order "
#~ "to help you understand the philosophy"
#~ " behind the Python ROS Wrapper"
#~ msgstr ""

#~ msgid ""
#~ "If you are using the real robot,"
#~ " make sure the environment around is"
#~ " clear"
#~ msgstr ""

#~ msgid "Code Details - First Move J"
#~ msgstr ""

#~ msgid ""
#~ "First of all, we indicate to the"
#~ " shell that we are running a "
#~ "Python Script ::"
#~ msgstr ""

#~ msgid "Then, We import the API package to be able to access functions ::"
#~ msgstr ""

#~ msgid ""
#~ "Then, we instantiate a ROS Node in"
#~ " order to communicate with ROS master"
#~ " ::"
#~ msgstr ""

#~ msgid ""
#~ "We start a "
#~ ":class:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper`"
#~ " instance ::"
#~ msgstr ""

#~ msgid ""
#~ "Once the connection is done, we "
#~ "calibrate the robot using its "
#~ ":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_auto`"
#~ " function ::"
#~ msgstr ""

#~ msgid ""
#~ "As the robot is now calibrated, we"
#~ " can do a Move Joints by giving"
#~ " the 6 axis positions in radians "
#~ "! To do so, we use "
#~ ":meth:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_joints`"
#~ " ::"
#~ msgstr ""

#~ msgid ""
#~ "For our second example, we are "
#~ "going to develop an algorithm of "
#~ "pick and place ::"
#~ msgstr ""

#~ msgid "Code Details - First Pick And Place"
#~ msgstr ""

#~ msgid "First of all, we do the imports and start a ROS Node ::"
#~ msgstr ""

#~ msgid ""
#~ "Then, create a "
#~ ":class:`~.niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper`"
#~ " instance & calibrate the robot ::"
#~ msgstr ""

#~ msgid "Notes - Basics Examples"
#~ msgstr ""

#~ msgid ""
#~ "You may not have fully understood "
#~ "how to move the robot and use "
#~ "tools of Ned and that is totally"
#~ " fine because you will find more "
#~ "details on another examples page !"
#~ msgstr ""

#~ msgid ""
#~ "The important thing to remember from "
#~ "this page is how to import the "
#~ "library & connect to the robot"
#~ msgstr ""

