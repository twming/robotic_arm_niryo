# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Niryo All rights reserved. No part of this document
# may be reproduced or transmitted in any form or by any means without prior
# written consent of Niryo SAS
# This file is distributed under the same license as the Ned ROS
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Ned ROS Documentation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-13 14:00+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:2
msgid "Python ROS Wrapper documentation"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:4
msgid ""
"This file presents the different Functions, Classes & Enums available "
"with the API."
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:11
msgid "API functions"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:13
msgid ""
"This class allows you to control the robot via internal API. By "
"controlling, we mean:"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:15
msgid "Moving the robot."
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:16
msgid "Using Vision."
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:17
msgid "Controlling Conveyors Belt."
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:18
msgid "Playing with hardware."
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:20
msgid "List of functions subsections:"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:30
msgid "Main purpose functions"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_auto:1
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_manual:1
#: of
msgid ""
"Calls service to calibrate motors then waits for its end. If failed, "
"raises NiryoRosWrapperException"
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.state
#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.wait_for_action
#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.wait_for_any_action
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.activate_electromagnet
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_auto
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_manual
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.close_gripper
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.control_conveyor
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.custom_button
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.deactivate_electromagnet
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_dynamic_frame
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_trajectory
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_workspace
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.detect_object
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_read
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_write
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.edit_dynamic_frame
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.enable_tcp
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses_and_joints
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.forward_kinematics
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_camera_intrinsics
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_compressed_image
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_current_tool_id
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_digital_io_state
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_hardware_status
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_joints
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_learning_mode
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose_as_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose_saved
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_dynamic_frame
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_dynamic_frame_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_pose_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_trajectory_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_cam
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_rel
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_trajectory_saved
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_ratio
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.grasp_with_tool
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.inverse_kinematics
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_joints_shift
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_pose_shift
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.led_ring
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_joints
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_relative
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose_saved
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_relative
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_object
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_sleep_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.open_gripper
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_and_place
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_from_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.place_from_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pull_air_vacuum_pump
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.push_air_vacuum_pump
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.release_with_tool
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.reset_tcp
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_points
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_trajectory
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_points
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_arm_max_velocity
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_brightness
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_contrast
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_conveyor
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_jog_use_state
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_learning_mode
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_pin_mode
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_saturation
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_tcp
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.setup_electromagnet
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_linear_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.sound
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.unset_conveyor
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.update_tool
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick of
msgid "Returns"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.activate_electromagnet:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_auto:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_manual:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.close_gripper:9
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.control_conveyor:12
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.deactivate_electromagnet:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_dynamic_frame:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_pose:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_trajectory:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_workspace:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_write:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.edit_dynamic_frame:9
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.enable_tcp:8
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses_and_joints:11
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.grasp_with_tool:9
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_joints_shift:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_pose_shift:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_joints:15
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_pose:18
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_relative:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose:18
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose_saved:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_relative:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_sleep_pose:4
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.open_gripper:9
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_and_place:10
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_from_pose:20
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.place_from_pose:20
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pull_air_vacuum_pump:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.push_air_vacuum_pump:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.release_with_tool:9
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.reset_tcp:4
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_points:11
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_poses:11
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_pose:17
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_trajectory:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_points:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_poses:8
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_arm_max_velocity:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_brightness:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_contrast:6
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_jog_use_state:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_learning_mode:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_pin_mode:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_saturation:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_tcp:16
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.setup_electromagnet:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_linear_pose:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_pose:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.unset_conveyor:6
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.update_tool:3 of
msgid "status, message"
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.get_and_wait_press_duration
#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.is_pressed
#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.state
#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.wait_for_action
#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.wait_for_any_action
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.activate_electromagnet
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_auto
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.calibrate_manual
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.close_gripper
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.control_conveyor
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.custom_button
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.deactivate_electromagnet
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_dynamic_frame
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_trajectory
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_workspace
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.detect_object
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_read
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_write
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.edit_dynamic_frame
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.enable_tcp
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses_and_joints
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.forward_kinematics
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_camera_intrinsics
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_compressed_image
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_current_tool_id
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_digital_io_state
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_hardware_status
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_joints
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_learning_mode
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose_as_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose_saved
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_dynamic_frame
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_dynamic_frame_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_pose_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_trajectory_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_cam
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_rel
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_trajectory_saved
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_ratio
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.grasp_with_tool
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.inverse_kinematics
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_joints_shift
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_pose_shift
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.led_ring
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_joints
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_relative
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose_saved
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_relative
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_object
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_sleep_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.open_gripper
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_and_place
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_from_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.place_from_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pull_air_vacuum_pump
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.push_air_vacuum_pump
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.release_with_tool
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.reset_tcp
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_points
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_trajectory
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_points
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_arm_max_velocity
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_brightness
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_contrast
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_conveyor
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_jog_use_state
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_learning_mode
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_pin_mode
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_saturation
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_tcp
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.setup_electromagnet
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_linear_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.sound
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.unset_conveyor
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.update_tool
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick of
msgid "Return type"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_learning_mode:1
#: of
msgid ""
"Uses /niryo_robot/learning_mode/state topic subscriber to get learning "
"mode status"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_learning_mode:3
#: of
msgid "``True`` if activate else ``False``"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_learning_mode:1
#: of
msgid ""
"Calsl service to set_learning_mode according to set_bool. If failed, "
"raises NiryoRosWrapperException"
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.wait_for_action
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.activate_electromagnet
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.close_gripper
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.control_conveyor
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.deactivate_electromagnet
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_dynamic_frame
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_trajectory
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_workspace
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.detect_object
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_read
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_write
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.edit_dynamic_frame
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.enable_tcp
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses_and_joints
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.forward_kinematics
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose_saved
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_dynamic_frame
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_pose_list
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_cam
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_rel
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_trajectory_saved
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_ratio
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.grasp_with_tool
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.inverse_kinematics
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_joints_shift
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_pose_shift
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_joints
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_relative
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose_saved
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_relative
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_object
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.open_gripper
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_and_place
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_from_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.place_from_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.release_with_tool
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_points
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_trajectory
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_points
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_poses
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_arm_max_velocity
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_brightness
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_contrast
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_jog_use_state
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_learning_mode
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_pin_mode
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_saturation
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_tcp
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.setup_electromagnet
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_linear_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_pose
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.unset_conveyor
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick of
msgid "Parameters"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_learning_mode:3
#: of
msgid "``True`` to activate, ``False`` to deactivate"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_arm_max_velocity:1
#: of
msgid "Sets relative max velocity (in %)"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_arm_max_velocity:3
#: of
msgid "Percentage of max velocity"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:38
msgid "Joints & Pose"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_joints:1 of
msgid "Uses /joint_states topic to get joints status"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_joints:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.inverse_kinematics:15
#: of
msgid "list of joints value"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose:1
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose_as_list:1
#: of
msgid "Uses /niryo_robot/robot_state topic to get pose status"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose:3 of
msgid ""
"RobotState object (position.x/y/z && rpy.roll/pitch/yaw && "
"orientation.x/y/z/w)"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.forward_kinematics:15
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose_as_list:3
#: of
msgid "list corresponding to [x, y, z, roll, pitch, yaw]"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_joints:1 of
msgid "Executes Move joints action"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_sleep_pose:1
#: of
msgid ""
"Moves to Sleep pose which allows the user to activate the learning mode "
"without the risk of the robot hitting something because of gravity"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose:1 of
msgid ""
"Moves robot end effector pose to a (x, y, z, roll, pitch, yaw) pose, in a"
" particular frame if defined"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_pose:1 of
msgid "Executes Shift pose action"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_linear_pose:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_pose:3 of
msgid "Value of RobotAxis enum corresponding to where the shift happens"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_linear_pose:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_pose:5 of
msgid "shift value"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.shift_linear_pose:1
#: of
msgid "Executes Shift pose action with a linear trajectory"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_pose:1
#: of
msgid ""
"Moves robot end effector pose to a (x, y, z, roll, pitch, yaw) pose, with"
" a linear trajectory, in a particular frame if defined"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_jog_use_state:1
#: of
msgid "Turns jog controller On or Off"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_jog_use_state:3
#: of
msgid "``True`` to turn on, else ``False``"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_joints_shift:1
#: of
msgid "Makes a Jog on joints position"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_joints_shift:3
#: of
msgid "list corresponding to the shift to be applied to each joint"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_pose_shift:1
#: of
msgid "Makes a Jog on end-effector position"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.jog_pose_shift:3
#: of
msgid "list corresponding to the shift to be applied to the position"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.forward_kinematics:1
#: of
msgid "Computes forward kinematics"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.inverse_kinematics:1
#: of
msgid "Computes inverse kinematics"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:48
msgid "Saved poses"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_pose_saved:1
#: of
msgid "Moves robot end effector pose to a pose saved"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose_saved:1
#: of
msgid ""
"Gets saved pose from robot intern storage Will raise error if position "
"does not exist"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose_saved:4
#: of
msgid "Pose Name"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_pose_saved:6
#: of
msgid "x, y, z, roll, pitch, yaw"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_pose:1 of
msgid "Saves pose in robot's memory"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_pose:1 of
msgid "Sends delete command to the pose manager service"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_pose_list:1
#: of
msgid "Asks the pose manager service which positions are available"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_pose_list:3
#: of
msgid "If True it returns the poses descriptions"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_pose_list:5
#: of
msgid "list of positions name"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:55
msgid "Pick & place"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_from_pose:1
#: of
msgid ""
"Executes a picking from a position. If an error happens during the "
"movement, error will be raised A picking is described as : - going over "
"the object - going down until height = z - grasping with tool - going "
"back over the object"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.place_from_pose:1
#: of
msgid ""
"Executes a placing from a position. If an error happens during the "
"movement, error will be raised A placing is described as : - going over "
"the place - going down until height = z - releasing the object with tool "
"- going back over the place"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_and_place:1
#: of
msgid ""
"Executes a pick and place. If an error happens during the movement, error"
" will be raised -> Args param is for development purposes"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses_and_joints:9
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pick_and_place:8
#: of
msgid "Distance from waypoints before smoothing trajectory"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:62
msgid "Trajectories"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_trajectory_saved:1
#: of
msgid ""
"Gets saved trajectory from robot intern storage Will raise error if "
"position does not exist"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_trajectory_saved
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_conveyor
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.unset_conveyor of
msgid "Raises"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_trajectory_saved:6
#: of
msgid "If trajectory file doesn't exist"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_trajectory_saved:7
#: of
msgid "list of [x, y, z, qx, qy, qz, qw]"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_trajectory_list:1
#: of
msgid "Asks the pose trajectory service which trajectories are available"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_trajectory_list:3
#: of
msgid "list of trajectory name"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses:1
#: of
msgid "Executes trajectory from a list of pose"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses:3
#: of
msgid "list of [x, y, z, qx, qy, qz, qw] or list of [x, y, z, roll, pitch, yaw]"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses_and_joints:1
#: of
msgid "Executes trajectory from list of poses and joints"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses_and_joints:3
#: of
msgid ""
"List of [x,y,z,qx,qy,qz,qw] or list of [x,y,z,roll,pitch,yaw] or a list "
"of [j1,j2,j3,j4,j5,j6]"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.execute_trajectory_from_poses_and_joints:6
#: of
msgid ""
"List of string 'pose' or 'joint', or ['pose'] (if poses only) or "
"['joint'] (if joints only). If None, it is assumed there are only poses "
"in the list."
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_trajectory:1
#: of
msgid "Saves trajectory object and sends it to the trajectory manager service"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_trajectory:3
#: of
msgid "name which will have the trajectory"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_trajectory:5
#: of
msgid "list of trajectory_msgs/JointTrajectoryPoint"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_trajectory:1
#: of
msgid "Sends delete command to the trajectory manager service"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_trajectory:3
#: of
msgid "name"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:70
msgid "Dynamic frames"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_poses:1
#: of
msgid "Create a dynamic frame with 3 poses (origin, x, y)"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.edit_dynamic_frame:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_dynamic_frame:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_points:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_poses:3
#: of
msgid "name of the frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_points:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_poses:5
#: of
msgid "description of the frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_poses:7
#: of
msgid "3 poses needed to create the frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_dynamic_frame:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_points:9
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_poses:9
#: of
msgid "indicate if the frame belong to a workspace"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_points:1
#: of
msgid "Create a dynamic frame with 3 points (origin, x, y)"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_dynamic_frame_from_points:7
#: of
msgid "3 points needed to create the frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.edit_dynamic_frame:1
#: of
msgid "Modify a dynamic frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.edit_dynamic_frame:5
#: of
msgid "new name of the frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.edit_dynamic_frame:7
#: of
msgid "new description of the frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_dynamic_frame:1
#: of
msgid "Delete a dynamic frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_dynamic_frame:3
#: of
msgid "name of the frame to remove"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_dynamic_frame:1
#: of
msgid "Get name, description and pose of a dynamic frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_dynamic_frame:5
#: of
msgid "name, description, position and orientation of a frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_dynamic_frame_list:1
#: of
msgid "Get list of saved dynamic frames"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_saved_dynamic_frame_list:3
#: of
msgid "list of dynamic frames name, list of description of dynamic frames"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_relative:1
#: of
msgid "Move robot end of a offset in a frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_relative:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_relative:3
#: of
msgid "list which contains offset of x, y, z, roll, pitch, yaw"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_relative:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_relative:5
#: of
msgid "name of local frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_linear_relative:1
#: of
msgid "Move robot end of a offset by a linear movement in a frame"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:78
msgid "Tools"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_current_tool_id:1
#: of
msgid "Uses /niryo_robot_tools_commander/current_id  topic to get current tool id"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_current_tool_id:3
#: of
msgid "Tool Id"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.update_tool:1 of
msgid "Calls service niryo_robot_tools_commander/update_tool to update tool"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.grasp_with_tool:1
#: of
msgid ""
"Grasps with the tool linked to tool_id This action corresponds to - Close"
" gripper for Grippers - Pull Air for Vacuum pump - Activate for "
"Electromagnet"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.grasp_with_tool:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.release_with_tool:7
#: of
msgid "[Only required for electromagnet] Pin ID of the electromagnet"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.release_with_tool:1
#: of
msgid ""
"Releases with the tool associated to tool_id This action corresponds to -"
" Open gripper for Grippers - Push Air for Vacuum pump - Deactivate for "
"Electromagnet"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.open_gripper:1 of
msgid "Opens gripper with a speed 'speed'"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.close_gripper:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.open_gripper:3 of
msgid "Default -> 500"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.close_gripper:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.open_gripper:5 of
msgid "Default -> 100"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.close_gripper:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.open_gripper:7 of
msgid "Default -> 20"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.close_gripper:1
#: of
msgid "Closes gripper with a speed 'speed'"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.pull_air_vacuum_pump:1
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.push_air_vacuum_pump:1
#: of
msgid "Pulls air"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.setup_electromagnet:1
#: of
msgid "Setups electromagnet on pin"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.activate_electromagnet:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.deactivate_electromagnet:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.setup_electromagnet:3
#: of
msgid "Pin ID"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.activate_electromagnet:1
#: of
msgid "Activates electromagnet associated to electromagnet_id on pin_id"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.deactivate_electromagnet:1
#: of
msgid "Deactivates electromagnet associated to electromagnet_id on pin_id"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.enable_tcp:1 of
msgid ""
"Enables or disables the TCP function (Tool Center Point). If activation "
"is requested, the last recorded TCP value will be applied. The default "
"value depends on the gripper equipped. If deactivation is requested, the "
"TCP will be coincident with the tool_link"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.enable_tcp:6 of
msgid "True to enable, False otherwise."
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_tcp:1 of
msgid ""
"Activates the TCP function (Tool Center Point) and defines the "
"transformation between the tool_link frame and the TCP frame"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.reset_tcp:1 of
msgid ""
"Resets the TCP (Tool Center Point) transformation. The TCP will be reset "
"according to the tool equipped"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:88
msgid "Hardware"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_pin_mode:1 of
msgid "Sets pin number pin_id to mode pin_mode"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_write:1
#: of
msgid "Sets pin_id state to pin_state"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_read:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_write:3
#: of
msgid "The name of the pin"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_read:1 of
msgid "Reads pin number pin_id and returns its state"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.digital_read:5 of
msgid "state"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_digital_io_state:1
#: of
msgid "Gets Digital IO state : Names, modes, states"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_digital_io_state:3
#: of
msgid "Infos contains in a IOsState object (see niryo_robot_msgs)"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_hardware_status:1
#: of
msgid ""
"Gets hardware status : Temperature, Hardware version, motors names & "
"types ..."
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_hardware_status:3
#: of
msgid "Infos contains in a HardwareStatus object (see niryo_robot_msgs)"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:96
msgid "Conveyor Belt"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_conveyor:1 of
msgid ""
"Scans for conveyor on can bus. If conveyor detected, returns the conveyor"
" ID"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_conveyor:4 of
msgid "ID"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.unset_conveyor:1
#: of
msgid "Removes specific conveyor"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.unset_conveyor:3
#: of
msgid "Basically, ConveyorID.ONE or ConveyorID.TWO"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.control_conveyor:1
#: of
msgid ""
"Controls conveyor associated to conveyor_id. Then stops it if "
"bool_control_on is False, else refreshes it speed and direction"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.control_conveyor:4
#: of
msgid "ConveyorID.ID_1 or ConveyorID.ID_2"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.control_conveyor:6
#: of
msgid "True for activate, False for deactivate"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.control_conveyor:8
#: of
msgid "target speed"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.control_conveyor:10
#: of
msgid "Target direction"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:103
msgid "Vision"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_compressed_image:1
#: of
msgid "Gets last stream image in a compressed format"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_compressed_image:3
#: of
msgid "string containing a JPEG compressed image"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_brightness:1
#: of
msgid "Modifies image brightness"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_brightness:3
#: of
msgid ""
"How much to adjust the brightness. 0.5 will give a darkened image, 1 will"
" give the original image while 2 will enhance the brightness by a factor "
"of 2."
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_contrast:1 of
msgid "Modifies image contrast"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_contrast:3 of
msgid ""
"While a factor of 1 gives original image. Making the factor towards 0 "
"makes the image greyer, while factor>1 increases the contrast of the "
"image."
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_saturation:1
#: of
msgid "Modifies image saturation"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.set_saturation:3
#: of
msgid ""
"How much to adjust the saturation. 0 will give a black and white image, 1"
" will give the original image while 2 will enhance the saturation by a "
"factor of 2."
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_rel:1
#: of
msgid ""
"Given a pose (x_rel, y_rel, yaw_rel) relative to a workspace, this "
"function returns the robot pose in which the current tool will be able to"
" pick an object at this pose. The height_offset argument (in m) defines "
"how high the tool will hover over the workspace. If height_offset = 0, "
"the tool will nearly touch the workspace."
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.detect_object:1
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_cam:4
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_rel:6
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_object:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick:9 of
msgid "name of the workspace"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_cam:6
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_rel:8
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_object:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick:11 of
msgid "offset between the workspace and the target height"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_rel:16
#: of
msgid "target_pose"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_cam:1
#: of
msgid ""
"First detects the specified object using the camera and then returns the "
"robot pose in which the object can be picked with the current tool"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.detect_object:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_cam:8
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_object:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick:13 of
msgid "shape of the target"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.detect_object:5
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_cam:10
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_object:9
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick:15 of
msgid "color of the target"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.detect_object:7
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_target_pose_from_cam:12
#: of
msgid "object_found, object_pose, object_shape, object_color"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick_w_obs_joints:1
#: of
msgid "Move Joints to observation_joints, then executes a vision pick"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick_w_obs_pose:1
#: of
msgid "Move Pose to observation_pose, then executes a vision pick"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick:1 of
msgid ""
"Picks the specified object from the workspace. This function has multiple"
" phases: 1. detects object using the camera 2. prepares the current tool "
"for picking 3. approaches the object 4. moves down to the correct picking"
" pose 5. actuates the current tool 6. lifts the object"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_object:11
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.vision_pick:17 of
msgid "object_found, object_shape, object_color"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.move_to_object:1
#: of
msgid "Same as `get_target_pose_from_cam` but directly moves to this position"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_camera_intrinsics:1
#: of
msgid "Gets calibration object: camera intrinsics, distortions coefficients"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_camera_intrinsics:3
#: of
msgid "raw camera intrinsics, distortions coefficients"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_poses:1
#: of
msgid ""
"Saves workspace by giving the poses of the robot to point its 4 corners "
"with the calibration Tip. Corners should be in the good order"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_points:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_poses:4
#: of
msgid "workspace name, max 30 char."
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_poses:6
#: of
msgid "list of 4 corners pose"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_points:1
#: of
msgid "Saves workspace by giving the poses of its 4 corners in the good order"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.save_workspace_from_points:5
#: of
msgid "list of 4 corners [x, y, z]"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_workspace:1
#: of
msgid "Calls workspace manager to delete a certain workspace"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.delete_workspace:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_poses:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_ratio:3
#: of
msgid "workspace name"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_poses:1
#: of
msgid "Gets the 4 workspace poses of the workspace called 'name'"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_poses:5
#: of
msgid "List of the 4 workspace poses"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_ratio:1
#: of
msgid "Gives the length over width ratio of a certain workspace"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_ratio:5
#: of
msgid "ratio"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_list:1
#: of
msgid "Asks the workspace manager service names of the available workspace"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.get_workspace_list:3
#: of
msgid "list of workspaces name"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:114
msgid "Sound"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:116
msgid ""
"For more function, please refer to: :ref:`Sound API "
"functions<source/stack/high_level/niryo_robot_sound:Sound API functions>`"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.sound:1 of
msgid "Manages sound"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.custom_button:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.led_ring:3
#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.sound:3 of
msgid "Example: ::"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.sound:10 of
msgid "SoundRosWrapper API instance"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:123
msgid "Led Ring"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:125
msgid ""
"For more function, please refer to: :ref:`Led Ring API "
"functions<source/stack/high_level/niryo_robot_led_ring:Led Ring API "
"functions>`"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.led_ring:1 of
msgid "Manages the LED ring"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.led_ring:10 of
msgid "LedRingRosWrapper API instance"
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:132
msgid "Custom Button"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.custom_button:1
#: of
msgid "Manages the custom button"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper.NiryoRosWrapper.custom_button:10
#: of
msgid "CustomButtonRosWrapper API instance"
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.state:1
#: of
msgid "Get the button state from the ButtonAction class"
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.state:3
#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.wait_for_action:3
#: of
msgid "int value from the ButtonAction class"
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.is_pressed:1
#: of
msgid "Button press state"
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.wait_for_action:1
#: of
msgid ""
"Waits until a specific action occurs and returns true. Returns false if "
"the timeout is reached."
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.wait_for_action:6
#: of
msgid "True if the action has occurred, false otherwise"
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.wait_for_any_action:1
#: of
msgid ""
"Returns the detected action. Returns ButtonAction.NO_ACTION if the "
"timeout is reached  without action."
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.wait_for_any_action:4
#: of
msgid ""
"Returns the detected action, or ButtonAction.NO_ACTION if the timeout is "
"reached  without any action."
msgstr ""

#: niryo_robot_python_ros_wrapper.custom_button_ros_wrapper.CustomButtonRosWrapper.get_and_wait_press_duration:1
#: of
msgid ""
"Waits for the button to be pressed and returns the press time. Returns 0 "
"if no press is detected after the timeout duration."
msgstr ""

#: ../../source/python_ros_wrapper/ros_wrapper_doc.rst:146
msgid "Enums"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper_enums.ToolID:1 of
msgid "Tools IDs (need to match tools ids in niryo_robot_tools_commander package)"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper_enums.PinMode:1 of
msgid "Pin Mode is either OUTPUT or INPUT"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper_enums.PinState:1 of
msgid "Pin State is either LOW or HIGH"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper_enums.PinID:1 of
msgid "Pins ID"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper_enums.ConveyorID:1 of
msgid ""
"ConveyorID to be able to have CAN (id 12 and 13) and TTL (id 9 and 10) "
"conveyor in any possible combination"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper_enums.ConveyorID:3 of
msgid ""
"ID_1 = 12   # One, Ned ID_2 = 13   # One, Ned ID_3 = 9    # Ned2 ID_4 = "
"10   # Ned2"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper_enums.ConveyorCan:1 of
msgid "ConveyorID to control conveyors with CAN interface"
msgstr ""

#: niryo_robot_python_ros_wrapper.ros_wrapper_enums.ConveyorTTL:1 of
msgid "ConveyorID to control conveyors with TTL interface"
msgstr ""

#~ msgid "Python ROS Wrapper Documentation"
#~ msgstr ""

#~ msgid ""
#~ "This file presents the different "
#~ "Functions, Classes & Enums available "
#~ "with the API"
#~ msgstr ""

#~ msgid "API Functions"
#~ msgstr ""

#~ msgid "This class allows you to control the robot via internal API"
#~ msgstr ""

#~ msgid "By controlling, we mean"
#~ msgstr ""

#~ msgid "Moving the robot"
#~ msgstr ""

#~ msgid "Using Vision"
#~ msgstr ""

#~ msgid "Controlling Conveyors"
#~ msgstr ""

#~ msgid "Playing with Hardware"
#~ msgstr ""

#~ msgid "Saved Poses"
#~ msgstr ""

#~ msgid "Pick & Place"
#~ msgstr ""

#~ msgid "Conveyor"
#~ msgstr ""

#~ msgid "Python ROS wrapper cocumentation"
#~ msgstr ""

#~ msgid ""
#~ "Call service to calibrate motors then"
#~ " wait for its end. If failed, "
#~ "raise NiryoRosWrapperException"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "status, message"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid ""
#~ "Use /niryo_robot/learning_mode/state topic "
#~ "subscriber to get learning mode status"
#~ msgstr ""

#~ msgid "``True`` if activate else ``False``"
#~ msgstr ""

#~ msgid ""
#~ "Call service to set_learning_mode according"
#~ " to set_bool. If failed, raise "
#~ "NiryoRosWrapperException"
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "``True`` to activate, ``False`` to deactivate"
#~ msgstr ""

#~ msgid "Set relative max velocity (in %)"
#~ msgstr ""

#~ msgid "Percentage of max velocity"
#~ msgstr ""

#~ msgid "Use /joint_states topic to get joints status"
#~ msgstr ""

#~ msgid "list of joints value"
#~ msgstr ""

#~ msgid "Use /niryo_robot/robot_state topic to get pose status"
#~ msgstr ""

#~ msgid ""
#~ "RobotState object (position.x/y/z && "
#~ "rpy.roll/pitch/yaw && orientation.x/y/z/w)"
#~ msgstr ""

#~ msgid "list corresponding to [x, y, z, roll, pitch, yaw]"
#~ msgstr ""

#~ msgid "Execute Move joints action"
#~ msgstr ""

#~ msgid ""
#~ "Move to Sleep pose which allows "
#~ "the user to activate the learning "
#~ "mode without the risk of the robot"
#~ " hitting something because of gravity"
#~ msgstr ""

#~ msgid "Move robot end effector pose to a (x, y, z, roll, pitch, yaw) pose."
#~ msgstr ""

#~ msgid "Execute Shift pose action"
#~ msgstr ""

#~ msgid "Value of RobotAxis enum corresponding to where the shift happens"
#~ msgstr ""

#~ msgid "shift value"
#~ msgstr ""

#~ msgid "Execute Shift pose action with a linear trajectory"
#~ msgstr ""

#~ msgid ""
#~ "Move robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw) "
#~ "pose, with a linear trajectory"
#~ msgstr ""

#~ msgid "Turn jog controller On or Off"
#~ msgstr ""

#~ msgid "``True`` to turn on, else ``False``"
#~ msgstr ""

#~ msgid "Make a Jog on joints position"
#~ msgstr ""

#~ msgid "list corresponding to the shift to be applied to each joint"
#~ msgstr ""

#~ msgid "Make a Jog on end-effector position"
#~ msgstr ""

#~ msgid "Compute forward kinematics"
#~ msgstr ""

#~ msgid "Compute inverse kinematics"
#~ msgstr ""

#~ msgid "Move robot end effector pose to a pose saved"
#~ msgstr ""

#~ msgid ""
#~ "Get saved pose from robot intern "
#~ "storage Will raise error if position "
#~ "does not exist"
#~ msgstr ""

#~ msgid "Pose Name"
#~ msgstr ""

#~ msgid "x, y, z, roll, pitch, yaw"
#~ msgstr ""

#~ msgid "Save pose in robot's memory"
#~ msgstr ""

#~ msgid "Send delete command to the pose manager service"
#~ msgstr ""

#~ msgid "Ask the pose manager service which positions are available"
#~ msgstr ""

#~ msgid "list of positions name"
#~ msgstr ""

#~ msgid ""
#~ "Execute a picking from a position. "
#~ "If an error happens during the "
#~ "movement, error will be raised. A "
#~ "picking is described as : - going"
#~ " over the object - going down "
#~ "until height = z - grasping with"
#~ " tool - going back over the "
#~ "object"
#~ msgstr ""

#~ msgid ""
#~ "Execute a placing from a position. "
#~ "If an error happens during the "
#~ "movement, error will be raised. A "
#~ "placing is described as : - going"
#~ " over the place - going down "
#~ "until height = z - releasing the"
#~ " object with tool - going back "
#~ "over the place"
#~ msgstr ""

#~ msgid ""
#~ "Execute a pick and place. If an"
#~ " error happens during the movement, "
#~ "error will be raised. -> Args "
#~ "param is for development purposes"
#~ msgstr ""

#~ msgid "Distance from waypoints before smoothing trajectory"
#~ msgstr ""

#~ msgid ""
#~ "Get saved trajectory from robot intern"
#~ " storage Will raise error if position"
#~ " does not exist"
#~ msgstr ""

#~ msgid "Raises"
#~ msgstr ""

#~ msgid "If trajectory file doesn't exist"
#~ msgstr ""

#~ msgid "list of [x, y, z, qx, qy, qz, qw]"
#~ msgstr ""

#~ msgid "Execute trajectory saved in Robot internal storage"
#~ msgstr ""

#~ msgid "Execute trajectory from a list of pose"
#~ msgstr ""

#~ msgid "Save trajectory object and send it to the trajectory manager service"
#~ msgstr ""

#~ msgid "name which will have the trajectory"
#~ msgstr ""

#~ msgid "Send delete command to the trajectory manager service"
#~ msgstr ""

#~ msgid "name"
#~ msgstr ""

#~ msgid "Ask the pose trajectory service which trajectories are available"
#~ msgstr ""

#~ msgid "list of trajectory name"
#~ msgstr ""

#~ msgid ""
#~ "Use /niryo_robot_hardware/tools/current_id  topic to"
#~ " get current tool id"
#~ msgstr ""

#~ msgid "Tool Id"
#~ msgstr ""

#~ msgid "Call service niryo_robot_tools/update_tool to update tool"
#~ msgstr ""

#~ msgid ""
#~ "Grasp with the tool linked to "
#~ "tool_id. This action correspond to - "
#~ "Close gripper for Grippers - Pull "
#~ "Air for Vacuum pump - Activate for"
#~ " Electromagnet"
#~ msgstr ""

#~ msgid "[Only required for electromagnet] Pin ID of the electromagnet"
#~ msgstr ""

#~ msgid ""
#~ "Release with the tool associated to "
#~ "tool_id. This action correspond to - "
#~ "Open gripper for Grippers - Push "
#~ "Air for Vacuum pump - Deactivate "
#~ "for Electromagnet"
#~ msgstr ""

#~ msgid "Open gripper with a speed 'speed'"
#~ msgstr ""

#~ msgid "Default -> 500"
#~ msgstr ""

#~ msgid "Close gripper with a speed 'speed'"
#~ msgstr ""

#~ msgid "Pull air"
#~ msgstr ""

#~ msgid "Setup electromagnet on pin"
#~ msgstr ""

#~ msgid "Pin ID"
#~ msgstr ""

#~ msgid "Activate electromagnet associated to electromagnet_id on pin_id"
#~ msgstr ""

#~ msgid "Deactivate electromagnet associated to electromagnet_id on pin_id"
#~ msgstr ""

#~ msgid "Set pin number pin_id to mode pin_mode"
#~ msgstr ""

#~ msgid "Set pin_id state to pin_state"
#~ msgstr ""

#~ msgid "Read pin number pin_id and return its state"
#~ msgstr ""

#~ msgid "state"
#~ msgstr ""

#~ msgid ""
#~ "Get hardware status : Temperature, "
#~ "Hardware version, motors names & types"
#~ " ..."
#~ msgstr ""

#~ msgid "Infos contains in a HardwareStatus object (see niryo_robot_msgs)"
#~ msgstr ""

#~ msgid "Get Digital IO state : Names, modes, states"
#~ msgstr ""

#~ msgid "Infos contains in a IOsState object (see niryo_robot_msgs)"
#~ msgstr ""

#~ msgid ""
#~ "Scan for conveyor on can bus. If"
#~ " conveyor detected, return the conveyor "
#~ "ID"
#~ msgstr ""

#~ msgid "ID"
#~ msgstr ""

#~ msgid "Remove specific conveyor."
#~ msgstr ""

#~ msgid "Basically, ConveyorID.ONE or ConveyorID.TWO"
#~ msgstr ""

#~ msgid ""
#~ "Control conveyor associated to conveyor_id."
#~ " Then stops it if bool_control_on is"
#~ " False, else refreshes it speed and"
#~ " direction"
#~ msgstr ""

#~ msgid "ConveyorID.ID_1 or ConveyorID.ID_2"
#~ msgstr ""

#~ msgid "True for activate, False for deactivate"
#~ msgstr ""

#~ msgid "target speed"
#~ msgstr ""

#~ msgid "Target direction"
#~ msgstr ""

#~ msgid "Get last stream image in a compressed format"
#~ msgstr ""

#~ msgid "string containing a JPEG compressed image"
#~ msgstr ""

#~ msgid ""
#~ "Given a pose (x_rel, y_rel, yaw_rel) "
#~ "relative to a workspace, this function"
#~ " returns the robot pose in which "
#~ "the current tool will be able to"
#~ " pick an object at this pose. "
#~ "The height_offset argument (in m) "
#~ "defines how high the tool will "
#~ "hover over the workspace. If "
#~ "height_offset = 0, the tool will "
#~ "nearly touch the workspace."
#~ msgstr ""

#~ msgid "name of the workspace"
#~ msgstr ""

#~ msgid "offset between the workspace and the target height"
#~ msgstr ""

#~ msgid "target_pose"
#~ msgstr ""

#~ msgid ""
#~ "First detects the specified object using"
#~ " the camera and then returns the "
#~ "robot pose in which the object can"
#~ " be picked with the current tool"
#~ msgstr ""

#~ msgid "shape of the target"
#~ msgstr ""

#~ msgid "color of the target"
#~ msgstr ""

#~ msgid "object_found, object_pose, object_shape, object_color"
#~ msgstr ""

#~ msgid "Move Joints to observation_joints, then execute a vision pick"
#~ msgstr ""

#~ msgid "Move Pose to observation_pose, then execute a vision pick"
#~ msgstr ""

#~ msgid ""
#~ "Picks the specified object from the "
#~ "workspace. This function has multiple "
#~ "phases: 1. detect object using the "
#~ "camera 2. prepare the current tool "
#~ "for picking 3. approach the object "
#~ "4. move down to the correct "
#~ "picking pose 5. actuate the current "
#~ "tool 6. lift the object"
#~ msgstr ""

#~ msgid "object_found, object_shape, object_color"
#~ msgstr ""

#~ msgid "Same as `get_target_pose_from_cam` but directly moves to this position"
#~ msgstr ""

#~ msgid "Get calibration object: camera intrinsics, distortions coefficients"
#~ msgstr ""

#~ msgid "raw camera intrinsics, distortions coefficients"
#~ msgstr ""

#~ msgid ""
#~ "Save workspace by giving the poses "
#~ "of the robot to point its 4 "
#~ "corners with the calibration Tip. "
#~ "Corners should be in the good "
#~ "order"
#~ msgstr ""

#~ msgid "workspace name"
#~ msgstr ""

#~ msgid "list of 4 corners pose"
#~ msgstr ""

#~ msgid "Save workspace by giving the poses of its 4 corners in the good order"
#~ msgstr ""

#~ msgid "list of 4 corners [x, y, z]"
#~ msgstr ""

#~ msgid "Call workspace manager to delete a certain workspace"
#~ msgstr ""

#~ msgid "Get the 4 workspace poses of the workspace called 'name'"
#~ msgstr ""

#~ msgid "List of the 4 workspace poses"
#~ msgstr ""

#~ msgid "Give the length over width ratio of a certain workspace"
#~ msgstr ""

#~ msgid "ratio"
#~ msgstr ""

#~ msgid "Ask the workspace manager service names of the available workspace"
#~ msgstr ""

#~ msgid "list of workspaces name"
#~ msgstr ""

#~ msgid "Tools IDs (need to match tools ids in niryo_robot_tools package)"
#~ msgstr ""

#~ msgid "Pin Mode is either OUTPUT or INPUT"
#~ msgstr ""

#~ msgid "Pin State is either LOW or HIGH"
#~ msgstr ""

#~ msgid "Pins ID"
#~ msgstr ""

#~ msgid ""
#~ "Reset the TCP (Tool Center Point) "
#~ "transformation. The PCO will be reset"
#~ " according to the tool equipped."
#~ msgstr ""

#~ msgid "list corresponding to the shift to be applied to the position"
#~ msgstr ""

#~ msgid ""
#~ "list of [x, y, z, qx, qy, "
#~ "qz, qw] or list of [x, y, z,"
#~ " roll, pitch, yaw]"
#~ msgstr ""

#~ msgid "Execute trajectory from list of poses and joints"
#~ msgstr ""

#~ msgid ""
#~ "List of [x,y,z,qx,qy,qz,qw] or list of"
#~ " [x,y,z,roll,pitch,yaw] or a list of "
#~ "[j1,j2,j3,j4,j5,j6]"
#~ msgstr ""

#~ msgid ""
#~ "List of string 'pose' or 'joint', "
#~ "or ['pose'] (if poses only) or "
#~ "['joint'] (if joints only). If None, "
#~ "it is assumed there are only poses"
#~ " in the list."
#~ msgstr ""

#~ msgid "Call service niryo_robot_tools_commander/update_tool to update tool"
#~ msgstr ""

#~ msgid ""
#~ "Enables or disables the TCP function "
#~ "(Tool Center Point). If activation is"
#~ " requested, the last recorded TCP "
#~ "value will be applied. The default "
#~ "value depends on the gripper equipped."
#~ " If deactivation is requested, the "
#~ "TCP will be coincident with the "
#~ "tool_link."
#~ msgstr ""

#~ msgid "True to enable, False otherwise."
#~ msgstr ""

#~ msgid ""
#~ "Activates the TCP function (Tool Center"
#~ " Point) and defines the transformation "
#~ "between the tool_link frame and the "
#~ "TCP frame."
#~ msgstr ""

#~ msgid ""
#~ "Reset the TCP (Tool Center Point) "
#~ "transformation. The TCP will be reset"
#~ " according to the tool equipped."
#~ msgstr ""

#~ msgid "Modify image brightness"
#~ msgstr ""

#~ msgid ""
#~ "How much to adjust the brightness. "
#~ "0.5 will give a darkened image, 1"
#~ " will give the original image while"
#~ " 2 will enhance the brightness by "
#~ "a factor of 2."
#~ msgstr ""

#~ msgid "Modify image contrast"
#~ msgstr ""

#~ msgid ""
#~ "While a factor of 1 gives original"
#~ " image. Making the factor towards 0"
#~ " makes the image greyer, while "
#~ "factor>1 increases the contrast of the"
#~ " image."
#~ msgstr ""

#~ msgid "Modify image saturation"
#~ msgstr ""

#~ msgid ""
#~ "How much to adjust the saturation. "
#~ "0 will give a black and white "
#~ "image, 1 will give the original "
#~ "image while 2 will enhance the "
#~ "saturation by a factor of 2."
#~ msgstr ""

#~ msgid "workspace name, max 30 char."
#~ msgstr ""

#~ msgid ""
#~ "Tools IDs (need to match tools ids"
#~ " in niryo_robot_tools_commander package)"
#~ msgstr ""

#~ msgid "If it returns the poses descriptions"
#~ msgstr ""

#~ msgid ""
#~ "Use /niryo_robot_tools_commander/current_id  topic "
#~ "to get current tool id"
#~ msgstr ""

#~ msgid "Default -> 100"
#~ msgstr ""

#~ msgid "Default -> 20"
#~ msgstr ""

#~ msgid "The name of the pin"
#~ msgstr ""

#~ msgid ""
#~ "List of [x, y, z, qx, qy, "
#~ "qz, qw] or list of [x, y, z,"
#~ " roll, pitch, yaw] or a list of"
#~ " [j1, j2, j3, j4, j5, j6]"
#~ msgstr ""

#~ msgid "Mange sound"
#~ msgstr ""

#~ msgid "Manage sound"
#~ msgstr ""

#~ msgid "Example: ::"
#~ msgstr ""

#~ msgid "SoundRosWrapper API instance"
#~ msgstr ""

#~ msgid "Manage the LED ring"
#~ msgstr ""

#~ msgid "LedRingRosWrapper API instance"
#~ msgstr ""

#~ msgid "Todo"
#~ msgstr ""

#~ msgid "ici je ne vois pas les fonctions"
#~ msgstr ""

#~ msgid "Get Button state:"
#~ msgstr ""

#~ msgid ""
#~ "HANDLE_HELD_ACTION = 0 LONG_PUSH_ACTION = "
#~ "1 SINGLE_PUSH_ACTION = 2 DOUBLE_PUSH_ACTION"
#~ " = 3 NO_ACTION = 100"
#~ msgstr ""

#~ msgid "int value from EEButtonStatus"
#~ msgstr ""

#~ msgid ""
#~ "Returns the detected action. Returns "
#~ "NO_ACTION if the timeout is reached  "
#~ "without action."
#~ msgstr ""

#~ msgid ""
#~ "Returns the detected action. Return "
#~ "NO_ACTION if the timeout is reached  "
#~ "without action"
#~ msgstr ""

#~ msgid ""
#~ "Returns the detected action. Returns  "
#~ "from ButtonAction class if the timeout"
#~ " is reached  without action."
#~ msgstr ""

#~ msgid "This class allows you to control the robot via internal API."
#~ msgstr ""

#~ msgid "By controlling, we mean:"
#~ msgstr ""

#~ msgid "Manage the custom button"
#~ msgstr ""

#~ msgid "Moves robot end effector pose to a (x, y, z, roll, pitch, yaw) pose."
#~ msgstr ""

#~ msgid "is defined, the frame to move in"
#~ msgstr ""

#~ msgid ":type frame : str :return: status, message :rtype: (int, str)"
#~ msgstr ""

#~ msgid ""
#~ "Moves robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw) "
#~ "pose, with a linear trajectory"
#~ msgstr ""

#~ msgid ""
#~ "Moves robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw) "
#~ "pose, in a frame if defined."
#~ msgstr ""

#~ msgid ""
#~ "Moves robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw) "
#~ "pose, with a linear trajectory, in "
#~ "a frame if defined"
#~ msgstr ""

#~ msgid "Create a dynamic frame"
#~ msgstr ""

#~ msgid ""
#~ ":param frame_name : name of local "
#~ "frame :type frame_name: str :param "
#~ "offset: list which contains offset of"
#~ " x, y, z, roll, pitch, yaw "
#~ ":type offset: list[float] :return: status, "
#~ "message :rtype: (int, str)"
#~ msgstr ""

#~ msgid "Frames"
#~ msgstr ""

#~ msgid "pose of a frame"
#~ msgstr ""

#~ msgid ""
#~ "Moves robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw) "
#~ "pose,  in a particular frame if "
#~ "defined."
#~ msgstr ""

#~ msgid ""
#~ "Moves robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw) "
#~ "pose, with a linear trajectory,  in "
#~ "a particular frame if defined"
#~ msgstr ""

#~ msgid ""
#~ "Moves robot end effector pose to a"
#~ " (x, y, z, roll, pitch, yaw) "
#~ "pose, in a particular frame if "
#~ "defined."
#~ msgstr ""

#~ msgid "If ''True'' it returns the poses descriptions"
#~ msgstr ""

#~ msgid ""
#~ "Executes a picking from a position. "
#~ "If an error happens during the "
#~ "movement, error will be raised. A "
#~ "picking is described as : - going"
#~ " over the object - going down "
#~ "until height = z - grasping with"
#~ " tool - going back over the "
#~ "object"
#~ msgstr ""

#~ msgid ""
#~ "Executes a placing from a position. "
#~ "If an error happens during the "
#~ "movement, error will be raised. A "
#~ "placing is described as : - going"
#~ " over the place - going down "
#~ "until height = z - releasing the"
#~ " object with tool - going back "
#~ "over the place"
#~ msgstr ""

#~ msgid ""
#~ "Executes a pick and place. If an"
#~ " error happens during the movement, "
#~ "error will be raised. -> Args "
#~ "param is for development purposes"
#~ msgstr ""

#~ msgid ""
#~ "Grasps with the tool linked to "
#~ "tool_id. This action corresponds to -"
#~ " Close gripper for Grippers - Pull"
#~ " Air for Vacuum pump - Activate "
#~ "for Electromagnet"
#~ msgstr ""

#~ msgid ""
#~ "Releases with the tool associated to "
#~ "tool_id. This action corresponds to -"
#~ " Open gripper for Grippers - Push "
#~ "Air for Vacuum pump - Deactivate "
#~ "for Electromagnet"
#~ msgstr ""

#~ msgid ""
#~ "Resets the TCP (Tool Center Point) "
#~ "transformation. The TCP will be reset"
#~ " according to the tool equipped."
#~ msgstr ""

#~ msgid "Removes specific conveyor."
#~ msgstr ""

#~ msgid "Executes trajectory saved in Robot internal storage"
#~ msgstr ""

