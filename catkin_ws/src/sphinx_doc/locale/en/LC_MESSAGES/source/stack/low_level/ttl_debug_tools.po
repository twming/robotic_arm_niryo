# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Niryo All rights reserved. No part of this document
# may be reproduced or transmitted in any form or by any means without prior
# written consent of Niryo SAS
# This file is distributed under the same license as the Ned ROS
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ned ROS Documentation v3.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-11 13:17+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/stack/low_level/ttl_debug_tools.rst:2
msgid "TTL Debug Tools"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:4
msgid ""
"This package is a debugging package to setup and access directly to all "
"hardware components on the TTL bus. It provides main functions like ping,"
" scan device and read/write/syncRead/syncWrite operations on devices."
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:7
msgid ""
"There are two ways to use this package: directly with the compiled "
"binary, or via :doc:`ttl_driver` services called in dedicated scripts."
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:10
msgid "Ttl debug tool binary"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:11
msgid ""
"The compiled binary (located in "
"*install/lib/ttl_debug_tools/ttl_debug_tools*) directly accesses the TTL "
"bus using :doc:`../third_parties/dynamixel_sdk` third party library. "
"Thus, it cannot be used if the Niryo ROS Stack is already running and you"
" should first stop the robot stack (sudo service niryo_robot_ros stop)"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:14
msgid "This tool can be launched via:  ::"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:18
msgid "or ::"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:23
msgid "Parameters - Ttl debug tools"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:24
msgid "**--help / -h:** Prints help message"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:25
msgid "**--baudrate / -b [Baudrate]:** Baudrates (1000000 by default)"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:26
msgid "**--port / -p [Port]:** Sets port"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:27
msgid "**--id / -i [ID]:** Devices ID (-1 by default)"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:28
msgid "**--ids [IDs]:** Lists of devices IDs"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:29
msgid "**--scan:** Scans all devices on the bus"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:30
msgid "**--ping:** Pings specific ID"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:31
msgid ""
"**--get-register [Addr]:** Gets a value from a register, parameters is: "
"register address"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:32
msgid ""
"**--get-registers [Addr]:** Gets list of values from multiple devices at "
"a register address, parameters is: register address"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:33
msgid ""
"**--get-size [Size]:** Size of data to be read with get-register or get-"
"registers, parameters is: size of data in bytes"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:34
msgid ""
"**--set-register [Addr] [Value] [Size]:** Sets a value to a register, "
"parameters are in the order: register address / value / size (in bytes) "
"of the data"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:35
msgid ""
"**--set-registers [Addr] [Values] [Size]:** Sets values to a register on "
"multiple devices, parameters are in the order: register address / list of"
" values / size (in bytes) of the data"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:36
msgid ""
"**--calibrate:** Calibrates all steppers on the bus. It is used in Ned2 "
"only"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:39
msgid "Scripts"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:40
msgid ""
"In order to use Ttl debug tools to debug an already running ROS stack, it"
" was necessary to develop another tool. To do so, two python scripts have"
" been developped. They ensure access to the data on the TTL bus via two "
"services implemented in the package :doc:`ttl_driver`:"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:43
msgid ""
"read_custom_dxl_value.py : uses service "
":ref:`ReadCustomValue<source/stack/low_level/ttl_driver:ReadCustomValue "
"(Service)>` to read values from the TTL bus"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:44
msgid ""
"send_custom_dxl_value : uses service "
":ref:`SendCustomValue<source/stack/low_level/ttl_driver:SendCustomValue "
"(Service)>` to write values to the TTL bus"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:47
msgid "Niryo robot - Send DXL custom value"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:48
msgid ""
"It uses a ttl_driver service to send data to a register of a device on "
"the TTL bus when the ROS stack is running. This script can be launched "
"via:  ::"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:54
msgid "Parameters - Send custom value"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:55
#: ../../source/stack/low_level/ttl_debug_tools.rst:69
msgid "**--id [ID]:** Device ID"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:56
msgid "**--address [Addr]:** Registers address to modify"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:57
msgid "**--value [Value]:** Value to store at the register address given"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:58
msgid "**--size [Size]:** Size in bytes of the data to write"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:61
msgid "Niryo robot - Read DXL custom value"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:62
msgid ""
"It uses a service to read data from a register a device on the TTL bus "
"when the ROS stack is running. This script can be launched via:  ::"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:68
msgid "Parameters - Read custom value"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:70
msgid "**--address [Addr]:** Register address to modify"
msgstr ""

#: ../../source/stack/low_level/ttl_debug_tools.rst:71
msgid "**--size [Size]:** Size in bytes of the data to read"
msgstr ""

#~ msgid ""
#~ "This package offers scripts to change"
#~ " ping/scan DXL motors and changes "
#~ "register values of these motors."
#~ msgstr ""

#~ msgid "This script can be launched via:  ::"
#~ msgstr ""

#~ msgid "**--baudrate / -b [Number]:** Baudrate (1000000 by default)"
#~ msgstr ""

#~ msgid "**--port / -p [Number]:** Set port"
#~ msgstr ""

#~ msgid "**--id / -i [Number]:** Dxl motor ID (0 by default)"
#~ msgstr ""

#~ msgid ""
#~ "**--set-register [Number] [Number] [Number]:**"
#~ " Set a value to a register, "
#~ "parameters are in the order: register"
#~ " address / value / size (in "
#~ "bytes) of the value"
#~ msgstr ""

#~ msgid "Services, Topics and Messages"
#~ msgstr ""

#~ msgid "**--id [Number]:** Motor ID"
#~ msgstr ""

#~ msgid "**--address [Number]:** Register address to modify"
#~ msgstr ""

#~ msgid "**--value [Number]:** Value to store at the register address given"
#~ msgstr ""

#~ msgid "**--size [Number]:** Size in bytes of the value given"
#~ msgstr ""

#~ msgid ""
#~ "This package offers scripts to debug "
#~ "with Hardware and setup TTL motors. "
#~ "It provides some main functions like "
#~ "ping, scan device, read/write/syncRead/syncWrite..."
#~ " from/to device."
#~ msgstr ""

#~ msgid "Niryo robot - Ttl debug tools"
#~ msgstr ""

#~ msgid ""
#~ "It provides service to interact directly"
#~ " with TTL motor to read or "
#~ "write data... It is used only when"
#~ " no stack ros is running. This "
#~ "script can be launched via:  ::"
#~ msgstr ""

#~ msgid "**--id / -i [ID]:** Dxl motor ID (-1 by default)"
#~ msgstr ""

#~ msgid "**--ids [IDs]:** the list of TTL motors's ID"
#~ msgstr ""

#~ msgid "**--scan:** Scan all Dxl motors on the bus"
#~ msgstr ""

#~ msgid ""
#~ "**--get-size [Size]:** size of data "
#~ "to be read with get-register or"
#~ " get-registers, parameters is: size "
#~ "of data in byte"
#~ msgstr ""

#~ msgid ""
#~ "**--set-register [Addr] [Value] [Size]:** "
#~ "Set a value to a register, "
#~ "parameters are in the order: register"
#~ " address / value / size (in "
#~ "bytes) of the value"
#~ msgstr ""

#~ msgid ""
#~ "**--set-registers [Addr] [Values] [Size]:**"
#~ " Set values to a register on "
#~ "multiple devices, parameters are in the"
#~ " order: register address / list of"
#~ " values / size (in bytes) of "
#~ "the value"
#~ msgstr ""

#~ msgid "**--calibrate:** Calibrate all steppers TTL. It is used in NED only"
#~ msgstr ""

#~ msgid ""
#~ "It provides a service to send data"
#~ " to a register of TTL motor "
#~ "when the ROS stack is running. "
#~ "This script can be launched via:  "
#~ "::"
#~ msgstr ""

#~ msgid "**--size [Size]:** Size in bytes of the value given"
#~ msgstr ""

#~ msgid ""
#~ "It provides a service to read data"
#~ " to a register of TTL motor "
#~ "when the ROS stack is running. "
#~ "This script can be launched via:  "
#~ "::"
#~ msgstr ""

#~ msgid ""
#~ "There is two way to use this "
#~ "package : directly with the compiled "
#~ "binary, or using services via the "
#~ "dedicated scripts."
#~ msgstr ""

#~ msgid ""
#~ "The compiled binary (located in "
#~ "*install/lib/ttl_debug_tools/ttl_debug_tools*) directly "
#~ "accesses the TTL bus using "
#~ ":doc:`dynamixel_sdk` third party library. "
#~ "Thus, it cannot be used if the "
#~ "Niryo ROS Stack is already running, "
#~ "you should first stop the service "
#~ "(sudo service niryo_robot_ros stop)"
#~ msgstr ""

#~ msgid ""
#~ "It is used only when no stack "
#~ "ros is running. This script can be"
#~ " launched via:  ::"
#~ msgstr ""

#~ msgid ""
#~ "As the compiled Ttl debug tools "
#~ "binary cannot be launch next to "
#~ "the stack, we wrote two python "
#~ "scripts to use services from a "
#~ "launched stack. Thus, we can debug "
#~ "an already running stack."
#~ msgstr ""

#~ msgid ""
#~ "Two scripts are available "
#~ ":ttl_driver::ReadCustomValue - read_custom_dxl_value.py"
#~ " : uses service "
#~ ":ref:`ReadCustomValue<source/stack/low_level/ttl_driver:ReadCustomValue"
#~ " (Service)>` to read values from the"
#~ " TTL bus - send_custom_dxl_value : "
#~ "uses service "
#~ ":ref:`SendCustomValue<source/stack/low_level/ttl_driver:SendCustomValue"
#~ " (Service)>` to write values to the"
#~ " TTL bus"
#~ msgstr ""

#~ msgid "**--id [ID]:** Motor ID"
#~ msgstr ""

#~ msgid ""
#~ "The compiled binary (located in "
#~ "*install/lib/ttl_debug_tools/ttl_debug_tools*) directly "
#~ "accesses the TTL bus using "
#~ ":doc:`dynamixel_sdk` third party library. "
#~ "Thus, it cannot be used if the "
#~ "Niryo ROS Stack is already running "
#~ "and you should first stop the "
#~ "robot stack (sudo service niryo_robot_ros "
#~ "stop)"
#~ msgstr ""

#~ msgid "**--ids [IDs]:** the list of TTL devices' ID"
#~ msgstr ""

#~ msgid ""
#~ "**--get-register [Addr]:** get a value"
#~ " from a register, parameters is: "
#~ "register address"
#~ msgstr ""

#~ msgid ""
#~ "**--get-registers [Addr]:** get list of"
#~ " values from multiple devices at a"
#~ " register address, parameters is: register"
#~ " address"
#~ msgstr ""

#~ msgid ""
#~ "**--get-size [Size]:** size of data "
#~ "to be read with get-register or"
#~ " get-registers, parameters is: size "
#~ "of data in bytes"
#~ msgstr ""

#~ msgid "**--calibrate:** Calibrate all steppers TTL. It is used in NED2 only"
#~ msgstr ""

#~ msgid ""
#~ "This package is a debugging package "
#~ "to setup and access directly to "
#~ "all hardware component on the TTL "
#~ "bus. It provides main functions like "
#~ "ping, scan device and "
#~ "read/write/syncRead/syncWrite operations on devices."
#~ msgstr ""

#~ msgid ""
#~ "There are two ways to use this "
#~ "package : directly with the compiled "
#~ "binary, or via :doc:`ttl_driver` services "
#~ "called in dedicated scripts."
#~ msgstr ""

#~ msgid "**--help / -h:** Print help message"
#~ msgstr ""

#~ msgid "**--baudrate / -b [Baudrate]:** Baudrate (1000000 by default)"
#~ msgstr ""

#~ msgid "**--port / -p [Port]:** Set port"
#~ msgstr ""

#~ msgid "**--id / -i [ID]:** Device ID (-1 by default)"
#~ msgstr ""

#~ msgid "**--ids [IDs]:** List of devices IDs"
#~ msgstr ""

#~ msgid "**--scan:** Scan all devices on the bus"
#~ msgstr ""

#~ msgid "**--ping:** Ping specific ID"
#~ msgstr ""

#~ msgid ""
#~ "**--get-register [Addr]:** Get a value"
#~ " from a register, parameters is: "
#~ "register address"
#~ msgstr ""

#~ msgid ""
#~ "**--get-registers [Addr]:** Get list of"
#~ " values from multiple devices at a"
#~ " register address, parameters is: register"
#~ " address"
#~ msgstr ""

#~ msgid ""
#~ "**--set-register [Addr] [Value] [Size]:** "
#~ "Set a value to a register, "
#~ "parameters are in the order: register"
#~ " address / value / size (in "
#~ "bytes) of the data"
#~ msgstr ""

#~ msgid ""
#~ "**--set-registers [Addr] [Values] [Size]:**"
#~ " Set values to a register on "
#~ "multiple devices, parameters are in the"
#~ " order: register address / list of"
#~ " values / size (in bytes) of "
#~ "the data"
#~ msgstr ""

#~ msgid ""
#~ "**--calibrate:** Calibrate all steppers on "
#~ "the bus. It is used in Ned2 "
#~ "only"
#~ msgstr ""

